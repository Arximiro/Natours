.row {
  max-width: $grid-width;
  background-color: #eee;
  margin: 0 auto;  

  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  @include clearfix;
  
  [class^="col-"] {
    background-color: rgb(160, 148, 144);
    float: left;
    padding: 20px;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }
  
  .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * #{$gutter-horizontal}) / 4) +  (2 * #{$gutter-horizontal}));
  }
}

// --- Grid Notes ---
// To get a col that is 1 of 2 in width of the parent div. We do 100% of the parent width - 1 guttter, divided by 2.
// To get a col that is 1 of 3 in width of the parent div. We do 100% of the parent width - 2 guttters, divided by 3.
// To get a col that is 1 of 4 in width of the parent div. We do 100% of the parent width - 3 guttters, divided by 4.

// To get a col that is 2 of 3 in width of the parent div. We do 2 times 100% of the parent width - 2 guttters, divided by 3 + 1 gutter.
// Since 2 of 3 will consume one of the gutters in its width, it must be added back on at the end.

// To get a col that is 2 of 4 in width of the parent div. We do 2 times 100% of the parent width - 3 guttters, divided by 4 + 1 gutter.
// Since 2 of 4 will consume one of the gutters in its width, it must be added back on at the end.

// To get a col that is 3 of 4 in width of the parent div. We do 3 times 100% of the parent width - 3 guttters, divided by 4 + 2 gutter.
// Since 3 of 4 will consume two of the gutters in its width, it must be added back on at the end.

// The clearfix is applied because when you float children inside a parent element, the parent element's height collapses.
// So to ensure it stays in place and they float properly, the clearfix must be applied. **See Mixins For Code**
